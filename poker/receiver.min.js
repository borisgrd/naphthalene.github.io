var Button,ButtonGroup,CardImage,Col,DropdownButton,Grid,Input,Jumbotron,Label,ListGroup,ListGroupItem,MainState,MenuItem,Nav,NavItem,Navbar,PageHeader,Panel,Row,WaitingForHost,displayText,table;DropdownButton=ReactBootstrap.DropdownButton,ListGroupItem=ReactBootstrap.ListGroupItem,ButtonGroup=ReactBootstrap.ButtonGroup,PageHeader=ReactBootstrap.PageHeader,Jumbotron=ReactBootstrap.Jumbotron,ListGroup=ReactBootstrap.ListGroup,MenuItem=ReactBootstrap.MenuItem,NavItem=ReactBootstrap.NavItem,Button=ReactBootstrap.Button,Navbar=ReactBootstrap.Navbar,Input=ReactBootstrap.Input,Label=ReactBootstrap.Label,Panel=ReactBootstrap.Panel,Grid=ReactBootstrap.Grid,Row=ReactBootstrap.Row,Col=ReactBootstrap.Col,Nav=ReactBootstrap.Nav,CardImage=React.createClass({render:function(){return React.createElement("object",{data:"/images/"+("H"===this.props.card[1]?"Hearts":"S"===this.props.card[1]?"Spades":"C"===this.props.card[1]?"Clubs":"D"===this.props.card[1]?"Diamonds":void 0)+"/"+this.props.card+".svg",type:"image/svg+xml",className:this.props.className})}}),WaitingForHost=React.createClass({render:function(){return React.createElement("div",null,React.createElement(Grid,{id:"game-grid"},React.createElement(Row,{id:"row-game-main",className:"row-centered"},React.createElement(Col,{xs:8,md:8,lg:6},React.createElement("h3",null,"Waiting for first player to join")))))}}),MainState=React.createClass({render:function(){return React.createElement("div",null,React.createElement(Grid,{id:"game-grid"},React.createElement(Row,{id:"row-game-main",className:"row-centered"},React.createElement(Col,{xs:8,md:8,lg:6},React.createElement("h3",null,"Table goes here")),React.createElement(Col,{xs:3,md:3,lg:3,xsoffset:2,mdoffset:3,lgoffset:4},React.createElement("h3",null,"Player list goes here")))))}}),table={state:null,prevState:null,container:null,state_data:null,states:{init:WaitingForHost,main:MainState},handleMessage:function(a){return this.setState(a.state,a.state_data)},setState:function(a,b){return this.state===a&&null!==this.container?(console.log("Updating state: "+b),this.container.setProps(b)):(this.prevState=this.state,this.state=a,this.container=React.render(React.createElement(this.states[a],b),document.getElementById("content")))}},window.onload=function(){return console.log("Before starting..."),cast.receiver.logger.setLevelValue(0),window.castReceiverManager=cast.receiver.CastReceiverManager.getInstance(),console.log("Starting Receiver Manager"),displayText("Starting Receiver Manager"),table.setState("init",{}),castReceiverManager.onReady=function(a){return console.log("Received Ready event: "+JSON.stringify(a.data)),window.castReceiverManager.setApplicationState("Application status is ready..."),displayText("Received Ready event: "+JSON.stringify(a.data))},castReceiverManager.onSenderConnected=function(a){return console.log("Received Sender Connected event: "+a.data),console.log(window.castReceiverManager.getSender(a.datxa).userAgent),displayText("Received Sender Connected event: "+a.data)},castReceiverManager.onSenderDisconnected=function(a){return console.log("Received Sender Disconnected event: "+a.data),0===window.castReceiverManager.getSenders().length&&window.close(),displayText("Received Sender Disconnected event: "+a.data)},castReceiverManager.onSystemVolumeChanged=function(a){return console.log("Received System Volume Changed event: "+a.data.level+" "+a.data.muted)},window.messageBus=window.castReceiverManager.getCastMessageBus("urn:x-cast:sadikov.apps.pokair"),window.messageBus.onMessage=function(a){return console.log("Message ["+a.senderId+"]: "+a.data),displayText(a.data),window.messageBus.send(a.senderId,{state:"main",state_data:{money:1e3}})},window.castReceiverManager.start({statusText:"Application is starting"}),console.log("Receiver Manager started")},displayText=function(a){var b;return b=document.getElementById("message"),b.innerHTML+="\n"+a,window.castReceiverManager.setApplicationState(a)};