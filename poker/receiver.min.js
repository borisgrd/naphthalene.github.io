var Button,ButtonGroup,CardImage,Col,ConnectedPlayers,DropdownButton,Grid,Input,Jumbotron,Label,ListGroup,ListGroupItem,MainState,MenuItem,Nav,NavItem,Navbar,PageHeader,Panel,Players,Row,Table,TableInfo,WaitingForPlayers,Well,displayText,table;DropdownButton=ReactBootstrap.DropdownButton,ListGroupItem=ReactBootstrap.ListGroupItem,ButtonGroup=ReactBootstrap.ButtonGroup,PageHeader=ReactBootstrap.PageHeader,Jumbotron=ReactBootstrap.Jumbotron,ListGroup=ReactBootstrap.ListGroup,MenuItem=ReactBootstrap.MenuItem,NavItem=ReactBootstrap.NavItem,Button=ReactBootstrap.Button,Navbar=ReactBootstrap.Navbar,Input=ReactBootstrap.Input,Table=ReactBootstrap.Table,Label=ReactBootstrap.Label,Panel=ReactBootstrap.Panel,Grid=ReactBootstrap.Grid,Well=ReactBootstrap.Well,Row=ReactBootstrap.Row,Col=ReactBootstrap.Col,Nav=ReactBootstrap.Nav,CardImage=React.createClass({render:function(){return React.createElement("object",{data:this.props.card?"/images/"+("H"===this.props.card[this.props.card.length-1]?"Hearts":"S"===this.props.card[this.props.card.length-1]?"Spades":"C"===this.props.card[this.props.card.length-1]?"Clubs":"D"===this.props.card[this.props.card.length-1]?"Diamonds":void 0)+"/"+this.props.card+".svg":"/images/card_outline.svg",type:"image/svg+xml",width:"100px",className:this.props.className})}}),TableInfo=React.createClass({render:function(){return React.createElement("div",{className:"vertical-center"},React.createElement(Panel,{header:"Community Cards - "+this.props.communityState,className:"panel-transparent"},React.createElement("ul",{className:"list-inline"},React.createElement("li",null,React.createElement(CardImage,{card:this.props.cards.flop[0]})),React.createElement("li",null,React.createElement(CardImage,{card:this.props.cards.flop[1]})),React.createElement("li",null,React.createElement(CardImage,{card:this.props.cards.flop[2]})),React.createElement("li",null,React.createElement(CardImage,{card:this.props.cards.turn})),React.createElement("li",null,React.createElement(CardImage,{card:this.props.cards.river}))),React.createElement("ul",{className:"list-inline"},React.createElement("li",null,"Hand ",React.createElement(Label,{bsStyle:"default"},"#"+this.props.hand)),React.createElement("li",null,"Current bid: ",React.createElement(Label,{bsStyle:"danger"},"$"+this.props.bid)),React.createElement("li",null,"Total pot: ",React.createElement(Label,{bsStyle:"info"},"$"+this.props.pot)))))}}),ConnectedPlayers=React.createClass({render:function(){return React.createElement(Panel,{header:"Connected players"},React.createElement(Table,{striped:!0,bordered:!0,condensed:!0},React.createElement("thead",null,React.createElement("tr",null,React.createElement("th",null,"name"))),this.props.players.map(function(a){return React.createElement("tr",null,React.createElement("td",null,a.name))})))}}),Players=React.createClass({render:function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n;for(l=Math.PI/this.props.players.length,a=l/2,i=500,g=window.innerWidth/2-100,k=[],c=0,j=this.props.players,d=0,f=j.length;f>d;d++)h=j[d],e=i*Math.cos(a)+g+"px",n=i*Math.sin(a)-100+"px",m={left:e,top:n},a+=l,b=h.name+(h.dealer?" - Dealer":"S"===h.blind?" - Small Blind":"B"===h.blind?" - Big Blind":""),k.push(React.createElement(Panel,{key:c,className:"semicircle panel-transparent "+(this.props.turn===h.name?"player-turn":""),style:m,header:b},this.props.players[c].fold?React.createElement("p",null,"FOLD"):React.createElement("p",null,"Bid: $"+this.props.players[c].bid))),c+=1;return React.createElement("div",{id:"player-display"},k)}}),WaitingForPlayers=React.createClass({handleMessage:function(a,b,c){return"start"===c.action?(window.messageBus.broadcast(JSON.stringify({status:"start",data:c.data})),table.setState("main",{})):void 0},getInitialState:function(){return{players:[]}},render:function(){return React.createElement("div",null,React.createElement(Grid,{id:"game-grid"},React.createElement(Row,{id:"row-game-main",className:"row-centered"},React.createElement(Col,{xs:8,md:8,lg:6},React.createElement("h3",null,"Waiting for players to join..."),React.createElement(ConnectedPlayers,{players:this.state.players})))))}}),MainState=React.createClass({endHand:function(a){return console.log("Need to award somebody. Review their cards and..."),this.awardPotTo(a),table.deck=this.shuffle(this.generateSortedDeck()),this.setState({dealer:(this.state.dealer+1)%this.state.players.length}),this.dealHand(this.state.dealer)},computeWinner:function(){return 0},dealCommunityOrEnd:function(){switch(this.state.community){case"Preflop":return console.log("Dealing Flop..."),this.setState({communityCards:{flop:[table.deck.shift(),table.deck.shift(),table.deck.shift()]},community:"Flop"});case"Flop":return console.log("Dealing Turn..."),this.setState({communityCards:{flop:this.state.communityCards.flop,turn:table.deck.shift()},community:"Turn"}),console.log("Dealt Turn...");case"Turn":return console.log("Dealing River..."),this.setState({communityCards:{flop:this.state.communityCards.flop,turn:this.state.communityCards.turn,river:table.deck.shift()},community:"River"});case"River":return console.log("Ending hand..."),this.endHand(this.computeWinner()),this.setState({communityCards:{flop:[null,null,null],turn:null,river:null},community:"Preflop"})}},awardPotTo:function(a){var b,c;return c=this.state.players,b=c[a],b.remaining=b.remaining+this.state.pot,console.log("Awarding pot..."),c[a]=b,this.setState({players:c,pot:0,bid:0}),console.log("Awarded pot...")},nextPlayersTurnOrEndHand:function(a,b){var c,d,e,f,g,h;try{for(g=(a+1)%this.state.players.length,e=!1,c=!0;g!==a&&!e;){if(e=!this.state.players[g].fold){c=!1;break}g=(g+1)%this.state.players.length}if(e&&(h=this.state.players.map(function(a){return!a.fold}).reduce(function(a,b){return b?a+1:a},0),console.log("Number of active players: "+h),h>1?(this.setState({turn:this.state.players[g].name}),window.messageBus.broadcast(JSON.stringify({status:"turn",data:{turn:this.state.turn}}))):(f=!0,c=!0)),"check"===b&&this.state.lastRaised===a&&(c=!0),c&&(console.log("This round of bidding is over"),this.dealCommunityOrEnd(),f))return console.log("handOver"),console.log(this.state.players[g].name+" has won"),this.endHand(g)}catch(i){return d=i,console.error(d.stack)}},playerAction:function(a,b,c){var d,e,f;return e=this.state.players.map(function(a){return a.id}).indexOf(a),f=this.state.players,console.log("pi is "+e),d=f[e],c(d,e),f[e]=d,this.setState({players:f}),this.nextPlayersTurnOrEndHand(e,b)},foldPlayer:function(a){return this.playerAction(a,"fold",function(a){return a.fold=!0,console.log(a.name+" has folded their hand")})},raisePlayer:function(a,b){var c;return c=this,this.playerAction(a,"raise",function(d,e){var f,g;try{return console.log(d.name+" raised by "+b.amount),g=c.state.bid-d.bid+b.amount,console.log(d.name+" is adding "+g+" to the pot"),d.remaining-g>=0?(d.bid=d.bid+g,d.remaining=d.remaining-g,c.setState({lastRaised:e,bid:d.bid,pot:c.state.pot+g}),window.messageBus.send(a,JSON.stringify({status:"raiseok",data:{remaining:d.remaining,bid:d.bid}})),window.messageBus.broadcast(JSON.stringify({status:"maxbid",data:{maxbid:c.state.bid}}))):window.messageBus.send(a,JSON.stringify({status:"raisefail",data:{reason:"Insufficient funds to raise this much"}}))}catch(h){return f=h,console.error(f)}})},callPlayer:function(a){var b;return b=this,this.playerAction(a,"call",function(c){var d;return d=b.state.bid-c.bid,c.remaining-d>=0?(c.bid=c.bid+d,c.remaining=c.remaining-d,b.setState({pot:b.state.pot+d}),window.messageBus.send(a,JSON.stringify({status:"callok",data:{remaining:c.remaining,pot:b.state.pot+d,bid:c.bid}}))):window.messageBus.send(a,JSON.stringify({status:"callfail",data:{reason:"Insufficient funds to call the bid"}}))})},checkPlayer:function(a){var b;return b=this,this.playerAction(a,"check",function(c){return c.bid===b.state.bid?window.messageBus.send(a,JSON.stringify({status:"checkok",data:{}})):window.messageBus.send(a,JSON.stringify({status:"checkfail",data:{reason:"You must call or fold since your bid doesn't match current top bid"}}))})},handleMessage:function(a,b,c){switch(c.action){case"fold":return this.foldPlayer(b);case"raise":return this.raisePlayer(b,c.data);case"call":return this.callPlayer(b);case"check":return this.checkPlayer(b);default:return console.error("Unknown message received")}},generateSortedDeck:function(){var a,b,c,d,e,f,g,h,i;for(i=["H","D","S","C"],c=["2","3","4","5","6","7","8","9","10","J","Q","K","A"],a=[],d=0,f=i.length;f>d;d++)for(h=i[d],e=0,g=c.length;g>e;e++)b=c[e],a.push(b+h);return a},shuffle:function(a){var b,c,d;for(b=a.length;b>0;)c=Math.floor(Math.random()*b),b--,d=a[b],a[b]=a[c],a[c]=d;return a},dealHand:function(a){var b,c,d,e,f,g,h,i,j,k,l,m;for(k=[],f=0,m=(a+1)%table.players.length,c=(m+1)%table.players.length,l=this.state.players,g=0,h=l.length;h>g;g++){i=l[g],b=m===f?table.rules.smallBlind:c===f?table.rules.bigBlind:0,j={id:i.id,name:i.name,dealer:a===f,blind:m===f?"S":c===f?"B":"N",bid:b,remaining:i.remaining-b,fold:!1,hand:[table.deck.shift(),table.deck.shift()]},k.push(j);try{window.messageBus.send(j.id,JSON.stringify({status:"deal",data:j}))}catch(n){d=n,console.error(d)}f++}e=k[(c+1)%k.length].name;try{window.messageBus.broadcast(JSON.stringify({status:"turn",data:{turn:e}})),window.messageBus.broadcast(JSON.stringify({status:"maxbid",data:{maxbid:table.rules.bigBlind}})),this.setState({players:k})}catch(n){d=n,console.error(d)}return[c,e,k]},getInitialState:function(){var a,b,c,d,e,f,g,h,i,j,k,l;for(table.deck=this.shuffle(this.generateSortedDeck()),c=Math.floor(Math.random()*table.players.length),l=(c+1)%table.players.length,b=(l+1)%table.players.length,d=table.players[(b+1)%table.players.length].name,e=0,j=[],k=table.players,f=0,g=k.length;g>f;f++)h=k[f],a=l===e?table.rules.smallBlind:b===e?table.rules.bigBlind:0,i={id:h.id,name:h.name,dealer:!1,blind:"N",bid:0,remaining:table.rules.buyIn,fold:!1,hand:[null,null]},j.push(i),e++;return{community:"Preflop",communityCards:{flop:[null,null,null],turn:null,river:null},players:j,dealer:c,turn:d,lastRaised:b,bid:table.rules.bigBlind,pot:table.rules.bigBlind+table.rules.smallBlind,hand:1}},componentDidMount:function(){return this.dealHand(this.state.dealer)},render:function(){return React.createElement("div",null,React.createElement(TableInfo,{cards:this.state.communityCards,communityState:this.state.community,bid:this.state.bid,pot:this.state.pot,hand:this.state.hand}),React.createElement(Players,{players:this.state.players,turn:this.state.turn}))}}),table={state:null,prevState:null,container:null,players:[],state_data:null,host:null,rules:{buyIn:1e3,bigBlind:10,smallBlind:5},states:{init:WaitingForPlayers,main:MainState},handleMessage:function(a,b){var c,d;switch(d=function(c){var d,e,f;for(d=0,e=c.length;e>d;d++)if(f=c[d],f.name===b.data.name&&f.id.split(":")[0]===a.split(":")[0])return console.log("Reconnecting user "+f.name),!0;return!1},b.action){case"join":if("init"===this.state)try{if(!d(this.players))return 0===this.players.length&&(console.log("First person joined: "+b.data.name),this.host=b.data.name,window.messageBus.send(a,JSON.stringify({status:"host",data:{}}))),this.players.push({name:b.data.name,id:a}),this.container.setState({players:this.players});if(this.host===b.data.name)return window.messageBus.send(a,JSON.stringify({status:"host",data:{}}))}catch(e){return c=e,console.error(c)}else{if("main"!==this.state)return console.error("Cannot join once game has begun!");if(d(this.players))return window.messageBus.send(a,JSON.stringify({status:"start",data:{}}))}break;default:return this.container.handleMessage(this,a,b)}},setState:function(a,b){return this.state===a&&null!==this.container?(displayText("Updating state: "+b),this.container.setProps(b)):(displayText("Setting state to: "+a),this.prevState=this.state,this.state=a,this.container=React.render(React.createElement(this.states[a],b),document.getElementById("content")))}},window.onload=function(){return cast.receiver.logger.setLevelValue(0),window.castReceiverManager=cast.receiver.CastReceiverManager.getInstance(),"undefined"!=typeof console&&(console.olog="undefined"!=typeof console.log?console.log:function(){return{}}),console.log=function(a){return console.olog(a),displayText(a)},console.error=console.debug=console.info=console.log,console.log("Starting Receiver Manager"),table.setState("init",{}),castReceiverManager.onReady=function(a){return console.log("Received Ready event: "+JSON.stringify(a.data)),window.castReceiverManager.setApplicationState("Application status is ready...")},castReceiverManager.onSenderConnected=function(a){return console.log("Received Sender Connected event: "+a.data),console.log(window.castReceiverManager.getSender(a.datxa).userAgent)},castReceiverManager.onSenderDisconnected=function(a){return console.log("Received Sender Disconnected event: "+a.data),0===window.castReceiverManager.getSenders().length?window.close():void 0},castReceiverManager.onSystemVolumeChanged=function(a){return console.log("Received System Volume Changed event: "+a.data.level+" "+a.data.muted)},window.messageBus=window.castReceiverManager.getCastMessageBus("urn:x-cast:sadikov.apps.pokair"),window.messageBus.onMessage=function(a){return console.log("Message ["+a.senderId+"]: "+a.data),table.handleMessage(a.senderId,JSON.parse(a.data))},window.castReceiverManager.start({statusText:"Application is starting"}),console.log("Receiver Manager started")},displayText=function(a){var b;return b=document.getElementById("message"),b.innerHTML+="\n"+a,b.scrollTop=b.scrollHeight};