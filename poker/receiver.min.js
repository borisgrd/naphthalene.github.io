var Button,ButtonGroup,CardImage,Col,ConnectedPlayers,DropdownButton,Grid,Input,Jumbotron,Label,ListGroup,ListGroupItem,MainState,MenuItem,Nav,NavItem,Navbar,PageHeader,Panel,Players,Row,Table,TableInfo,WaitingForPlayers,Well,displayText,table;DropdownButton=ReactBootstrap.DropdownButton,ListGroupItem=ReactBootstrap.ListGroupItem,ButtonGroup=ReactBootstrap.ButtonGroup,PageHeader=ReactBootstrap.PageHeader,Jumbotron=ReactBootstrap.Jumbotron,ListGroup=ReactBootstrap.ListGroup,MenuItem=ReactBootstrap.MenuItem,NavItem=ReactBootstrap.NavItem,Button=ReactBootstrap.Button,Navbar=ReactBootstrap.Navbar,Input=ReactBootstrap.Input,Table=ReactBootstrap.Table,Label=ReactBootstrap.Label,Panel=ReactBootstrap.Panel,Grid=ReactBootstrap.Grid,Well=ReactBootstrap.Well,Row=ReactBootstrap.Row,Col=ReactBootstrap.Col,Nav=ReactBootstrap.Nav,CardImage=React.createClass({render:function(){return React.createElement("object",{data:this.props.card?"/images/"+("H"===this.props.card[this.props.card.length-1]?"Hearts":"S"===this.props.card[this.props.card.length-1]?"Spades":"C"===this.props.card[this.props.card.length-1]?"Clubs":"D"===this.props.card[this.props.card.length-1]?"Diamonds":void 0)+"/"+this.props.card+".svg":"/images/card_outline.svg",type:"image/svg+xml",width:"100px",className:this.props.className})}}),TableInfo=React.createClass({render:function(){return React.createElement("div",{className:"vertical-center"},React.createElement(Panel,{header:"Community Cards - "+this.props.communityState,className:"panel-transparent"},React.createElement("ul",{className:"list-inline"},React.createElement("li",null,React.createElement(CardImage,{card:this.props.cards.flop[0]})),React.createElement("li",null,React.createElement(CardImage,{card:this.props.cards.flop[1]})),React.createElement("li",null,React.createElement(CardImage,{card:this.props.cards.flop[2]})),React.createElement("li",null,React.createElement(CardImage,{card:this.props.cards.turn})),React.createElement("li",null,React.createElement(CardImage,{card:this.props.cards.river}))),React.createElement("ul",{className:"list-inline"},React.createElement("li",null,"Hand ",React.createElement(Label,{bsStyle:"default"},"#"+this.props.hand)),React.createElement("li",null,"Current bid: ",React.createElement(Label,{bsStyle:"danger"},"$"+this.props.bid)),React.createElement("li",null,"Total pot: ",React.createElement(Label,{bsStyle:"info"},"$"+this.props.pot)))))}}),ConnectedPlayers=React.createClass({render:function(){return React.createElement(Panel,{header:"Connected players"},React.createElement(Table,{striped:!0,bordered:!0,condensed:!0},React.createElement("thead",null,React.createElement("tr",null,React.createElement("th",null,"name"))),this.props.players.map(function(a){return React.createElement("tr",null,React.createElement("td",null,a.name))})))}}),Players=React.createClass({render:function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n;for(l=Math.PI/this.props.players.length,a=l/2,i=500,g=window.innerWidth/2-100,k=[],c=0,j=this.props.players,d=0,f=j.length;f>d;d++)h=j[d],e=i*Math.cos(a)+g+"px",n=i*Math.sin(a)-100+"px",m={left:e,top:n},a+=l,b=h.name+(h.dealer?" - Dealer":"S"===h.blind?" - Small Blind":"B"===h.blind?" - Big Blind":""),k.push(React.createElement(Panel,{key:c,className:"semicircle panel-transparent "+(this.props.turn===h.name?"player-turn":""),style:m,header:b},this.props.players[c].fold?React.createElement("p",null,"FOLD"):React.createElement("p",null,"Bid: $"+this.props.players[c].bid))),c+=1;return React.createElement("div",{id:"player-display"},k)}}),WaitingForPlayers=React.createClass({handleMessage:function(a,b,c){return"start"===c.action?(window.messageBus.broadcast(JSON.stringify({status:"start",data:c.data})),table.setState("main",{})):void 0},getInitialState:function(){return{players:[]}},render:function(){return React.createElement("div",null,React.createElement(Grid,{id:"game-grid"},React.createElement(Row,{id:"row-game-main",className:"row-centered"},React.createElement(Col,{xs:8,md:8,lg:6},React.createElement("h3",null,"Waiting for players to join..."),React.createElement(ConnectedPlayers,{players:this.state.players})))))}}),MainState=React.createClass({nextPlayersTurnOrEndHand:function(a){var b,c,d;try{for(d=(a+1)%this.state.players.length,c=!1;d!==a&&!c&&!(c=!this.state.players[d].fold);)d=(d+1)%this.state.players.length;return c?(this.setState({players:players,turn:this.state.players[d].name}),window.messageBus.broadcast(JSON.stringify({status:"turn",data:{turn:this.state.turn}}))):console.log("Cannot find another player who hasn't folded")}catch(e){return b=e,console.error(b)}},playerAction:function(a,b){var c,d,e;return d=this.state.players.map(function(a){return a.id}).indexOf(a),e=this.state.players,c=e[d],b(c),e[d]=c,this.nextPlayersTurnOrEndHand()},foldPlayer:function(a){return this.playerAction(a,function(a){return a.fold=!0,console.log(a.name+" has folded their hand")})},handleMessage:function(a,b,c){switch(c.action){case"fold":return this.foldPlayer(b);case"raise":return this.raisePlayer(b,c.data);default:return console.error("Unknown message received")}},generateSortedDeck:function(){var a,b,c,d,e,f,g,h,i;for(i=["H","D","S","C"],c=["2","3","4","5","6","7","8","9","10","J","Q","K","A"],a=[],d=0,f=i.length;f>d;d++)for(h=i[d],e=0,g=c.length;g>e;e++)b=c[e],a.push(b+h);return a},shuffle:function(a){var b,c,d;for(b=a.length;b>0;)c=Math.floor(Math.random()*b),b--,d=a[b],a[b]=a[c],a[c]=d;return a},dealHand:function(a){var b,c,d,e,f,g,h,i,j,k,l,m;for(m=(a+1)%table.players.length,c=(m+1)%table.players.length,f=0,k=[],l=table.players,g=0,h=l.length;h>g;g++){i=l[g],b=m===f?table.rules.smallBlind:c===f?table.rules.bigBlind:0,j={id:i.id,name:i.name,dealer:a===f?!0:!1,blind:m===f?"S":c===f?"B":"N",bid:b,remaining:table.rules.buyIn-b,fold:!1,hand:[table.deck.shift(),table.deck.shift()]},k.push(j);try{window.messageBus.send(j.id,JSON.stringify({status:"deal",data:j}))}catch(n){d=n,console.error(d)}f++}e=k[(c+1)%k.length].name;try{window.messageBus.broadcast(JSON.stringify({status:"turn",data:{turn:e}}))}catch(n){d=n,console.error(d)}return[e,k]},getInitialState:function(){var a,b,c;return table.deck=this.shuffle(this.generateSortedDeck()),c=this.dealHand(Math.floor(Math.random()*table.players.length)),a=c[0],b=c[1],{community:"Preflop",communityCards:{flop:[null,null,null],turn:null,river:null},players:b,turn:a,bid:table.rules.bigBlind,pot:table.rules.bigBlind+table.rules.smallBlind,hand:1}},render:function(){return React.createElement("div",null,React.createElement(TableInfo,{cards:this.state.communityCards,communityState:this.state.community,bid:this.state.bid,pot:this.state.pot,hand:this.state.hand}),React.createElement(Players,{players:this.state.players,turn:this.state.turn}))}}),table={state:null,prevState:null,container:null,players:[],state_data:null,host:null,rules:{buyIn:1e3,bigBlind:10,smallBlind:5},states:{init:WaitingForPlayers,main:MainState},handleMessage:function(a,b){var c,d;switch(d=function(c){var d,e,f;for(d=0,e=c.length;e>d;d++)if(f=c[d],f.name===b.data.name&&f.id.split(":")[0]===a.split(":")[0])return console.log("Reconnecting user "+f.name),!0;return!1},b.action){case"join":if("init"===this.state)try{if(!d(this.players))return 0===this.players.length&&(console.log("First person joined: "+b.data.name),this.host=b.data.name,window.messageBus.send(a,JSON.stringify({status:"host",data:{}}))),this.players.push({name:b.data.name,id:a}),this.container.setState({players:this.players});if(this.host===b.data.name)return window.messageBus.send(a,JSON.stringify({status:"host",data:{}}))}catch(e){return c=e,console.error(c)}else{if("main"!==this.state)return console.error("Cannot join once game has begun!");if(d(this.players))return window.messageBus.send(a,JSON.stringify({status:"start",data:{}}))}break;default:return this.container.handleMessage(this,a,b)}},setState:function(a,b){return this.state===a&&null!==this.container?(displayText("Updating state: "+b),this.container.setProps(b)):(displayText("Setting state to: "+a),this.prevState=this.state,this.state=a,this.container=React.render(React.createElement(this.states[a],b),document.getElementById("content")))}},window.onload=function(){return cast.receiver.logger.setLevelValue(0),window.castReceiverManager=cast.receiver.CastReceiverManager.getInstance(),"undefined"!=typeof console&&(console.olog="undefined"!=typeof console.log?console.log:function(){return{}}),console.log=function(a){return console.olog(a),displayText(a)},console.error=console.debug=console.info=console.log,console.log("Starting Receiver Manager"),table.setState("init",{}),castReceiverManager.onReady=function(a){return console.log("Received Ready event: "+JSON.stringify(a.data)),window.castReceiverManager.setApplicationState("Application status is ready...")},castReceiverManager.onSenderConnected=function(a){return console.log("Received Sender Connected event: "+a.data),console.log(window.castReceiverManager.getSender(a.datxa).userAgent)},castReceiverManager.onSenderDisconnected=function(a){return console.log("Received Sender Disconnected event: "+a.data),0===window.castReceiverManager.getSenders().length?window.close():void 0},castReceiverManager.onSystemVolumeChanged=function(a){return console.log("Received System Volume Changed event: "+a.data.level+" "+a.data.muted)},window.messageBus=window.castReceiverManager.getCastMessageBus("urn:x-cast:sadikov.apps.pokair"),window.messageBus.onMessage=function(a){return console.log("Message ["+a.senderId+"]: "+a.data),table.handleMessage(a.senderId,JSON.parse(a.data))},window.castReceiverManager.start({statusText:"Application is starting"}),console.log("Receiver Manager started")},displayText=function(a){var b;return b=document.getElementById("message"),b.innerHTML+="\n"+a,b.scrollTop=b.scrollHeight};